{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\MEPSA-FULLSTACK\\\\Desktop\\\\workspace-release-12-2022\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\MEPSA-FULLSTACK\\\\Desktop\\\\workspace-release-12-2022\\\\web\\\\src\\\\pages\\\\Tests\\\\index.jsx\";\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { getAll } from '../../actions';\nimport { create } from '../../actions';\nimport { AiOutlineMail, AiOutlineUser } from 'react-icons/ai';\nimport { CgWorkAlt } from 'react-icons/cg';\nimport { FaIndustry } from 'react-icons/fa';\nimport Title from '../../components/Title';\nimport Button from '../../components/Button';\nimport bg from '../../assets/static/jobpool.jpg';\nimport './styles.scss';\nimport moment from 'moment';\nimport LinearProgress from '@mui/material/LinearProgress';\nvar style = {\n  backgroundImage: \"linear-gradient(\\nrgba(0, 0, 0, 0.9),\\nrgba(0, 0, 0, 0.9)\\n),url(\".concat(bg, \")\")\n};\nmoment.locale('es-mx');\nconsole.log(moment().format('YYYY-MM-DD HH:mm:ss'));\n\nvar Contact = function Contact(props) {\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      num = _useState2[0],\n      setNum = _useState2[1];\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  var test = props.test;\n  useEffect(function () {\n    props.getAll(\"tests/\".concat(id), 'GET_TEST');\n    intervalRef.current = setInterval(decreaseNum, 1000);\n    return function () {\n      return clearInterval(intervalRef.current);\n    }; // eslint-disable-next-line\n  }, []);\n  useEffect(function () {\n    if (test && test.test !== undefined) {\n      var start = moment();\n      var end = moment(test.test.end);\n      var diff = end.diff(start, 'seconds');\n      console.log(moment(test.test.end).format('YYYY-MM-DD HH:mm:ss'));\n      setNum(diff);\n    } // eslint-disable-next-line\n\n  }, [test]);\n  var intervalRef = useRef();\n\n  var decreaseNum = function decreaseNum() {\n    setNum(function (prev) {\n      return prev - 1;\n    });\n  };\n\n  var onSubmit = function onSubmit(data) {\n    props.create(\"tests/\".concat(id), 'CREATE_TEST', data).then(function () {\n      props.history.push('/');\n    });\n  };\n\n  var progress = (num * 100 / 3600).toFixed(0);\n\n  if (test && num > 0) {\n    var _test$test, _test$sections;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"test\",\n      style: style,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testContainer\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testContainer__right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Title, {\n      className: \"title --mid\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, (_test$test = test.test) === null || _test$test === void 0 ? void 0 : _test$test.name), \"Tiempo Restante\", /*#__PURE__*/React.createElement(LinearProgress, {\n      color: \"success\",\n      variant: \"determinate\",\n      value: progress,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"testContainer__form\",\n      id: \"test\",\n      onSubmit: handleSubmit(onSubmit),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testContainer__formGroup\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AiOutlineUser, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"Nombre Completo\",\n      ref: register({\n        required: true\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testContainer__formGroup\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FaIndustry, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"company\",\n      placeholder: \"Empresa\",\n      ref: register({\n        required: true\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testContainer__formGroup\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CgWorkAlt, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"job\",\n      placeholder: \"Puesto\",\n      ref: register({\n        required: true\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testContainer__formGroup\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(AiOutlineMail, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"email\",\n      placeholder: \"Email\",\n      ref: register({\n        required: true\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    })), (_test$sections = test.sections) === null || _test$sections === void 0 ? void 0 : _test$sections.map(function (section, index) {\n      var _section$questions;\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        className: \"title --mid\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 19\n        }\n      }, section.title), (_section$questions = section.questions) === null || _section$questions === void 0 ? void 0 : _section$questions.map(function (question, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          className: \"test__question\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          htmlFor: \"\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 23\n          }\n        }, question.question, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"test__answerBox\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 25\n          }\n        }, question.answers.map(function (answer, index) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: index,\n            className: \"test__answer\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 29\n            }\n          }, answer.answer, /*#__PURE__*/React.createElement(\"input\", {\n            type: \"radio\",\n            name: question.id,\n            value: answer.id,\n            ref: register,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 31\n            }\n          }));\n        }))));\n      }));\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"testContainer__formGroup\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, \"Enviar\"))))));\n  } else {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 12\n      }\n    }, \"El Examen Ha Terminado\");\n  }\n};\n\nvar mapDispatchToProps = {\n  getAll: getAll,\n  create: create\n};\n\nvar mapStatetoProps = function mapStatetoProps(state) {\n  return {\n    test: state.reducerTests.test\n  };\n};\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(Contact);","map":{"version":3,"sources":["C:/Users/MEPSA-FULLSTACK/Desktop/workspace-release-12-2022/web/src/pages/Tests/index.jsx"],"names":["React","useEffect","useState","useRef","connect","useForm","useParams","getAll","create","AiOutlineMail","AiOutlineUser","CgWorkAlt","FaIndustry","Title","Button","bg","moment","LinearProgress","style","backgroundImage","locale","console","log","format","Contact","props","register","handleSubmit","num","setNum","id","test","intervalRef","current","setInterval","decreaseNum","clearInterval","undefined","start","end","diff","prev","onSubmit","data","then","history","push","progress","toFixed","name","required","sections","map","section","index","title","questions","question","answers","answer","mapDispatchToProps","mapStatetoProps","state","reducerTests"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,EAAP,MAAe,iCAAf;AACA,OAAO,eAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,IAAMC,KAAK,GAAG;AACZC,EAAAA,eAAe,6EAGTJ,EAHS;AADH,CAAd;AAOAC,MAAM,CAACI,MAAP,CAAc,OAAd;AAEAC,OAAO,CAACC,GAAR,CAAYN,MAAM,GAAGO,MAAT,CAAgB,qBAAhB,CAAZ;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,KAAK,EAAI;AAAA,iBACYpB,OAAO,EADnB;AAAA,MACfqB,QADe,YACfA,QADe;AAAA,MACLC,YADK,YACLA,YADK;;AAAA,kBAEDzB,QAAQ,EAFP;AAAA;AAAA,MAEhB0B,GAFgB;AAAA,MAEXC,MAFW;;AAAA,mBAIRvB,SAAS,EAJD;AAAA,MAIfwB,EAJe,cAIfA,EAJe;;AAAA,MAKfC,IALe,GAKNN,KALM,CAKfM,IALe;AAOvB9B,EAAAA,SAAS,CAAC,YAAM;AACdwB,IAAAA,KAAK,CAAClB,MAAN,iBAAsBuB,EAAtB,GAA4B,UAA5B;AACAE,IAAAA,WAAW,CAACC,OAAZ,GAAsBC,WAAW,CAACC,WAAD,EAAc,IAAd,CAAjC;AACA,WAAO;AAAA,aAAMC,aAAa,CAACJ,WAAW,CAACC,OAAb,CAAnB;AAAA,KAAP,CAHc,CAId;AACD,GALQ,EAKN,EALM,CAAT;AAOAhC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI8B,IAAI,IAAIA,IAAI,CAACA,IAAL,KAAcM,SAA1B,EAAqC;AACnC,UAAMC,KAAK,GAAGtB,MAAM,EAApB;AACA,UAAMuB,GAAG,GAAGvB,MAAM,CAACe,IAAI,CAACA,IAAL,CAAUQ,GAAX,CAAlB;AACA,UAAMC,IAAI,GAAGD,GAAG,CAACC,IAAJ,CAASF,KAAT,EAAgB,SAAhB,CAAb;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACe,IAAI,CAACA,IAAL,CAAUQ,GAAX,CAAN,CAAsBhB,MAAtB,CAA6B,qBAA7B,CAAZ;AAEAM,MAAAA,MAAM,CAACW,IAAD,CAAN;AACD,KARa,CASd;;AACD,GAVQ,EAUN,CAACT,IAAD,CAVM,CAAT;AAYA,MAAIC,WAAW,GAAG7B,MAAM,EAAxB;;AAEA,MAAMgC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBN,IAAAA,MAAM,CAAC,UAAAY,IAAI;AAAA,aAAIA,IAAI,GAAG,CAAX;AAAA,KAAL,CAAN;AACD,GAFD;;AAIA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,IAAI,EAAI;AACvBlB,IAAAA,KAAK,CAACjB,MAAN,iBAAsBsB,EAAtB,GAA4B,aAA5B,EAA2Ca,IAA3C,EAAiDC,IAAjD,CAAsD,YAAM;AAC1DnB,MAAAA,KAAK,CAACoB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,KAFD;AAGD,GAJD;;AAMA,MAAMC,QAAQ,GAAG,CAAEnB,GAAG,GAAG,GAAP,GAAc,IAAf,EAAqBoB,OAArB,CAA6B,CAA7B,CAAjB;;AAEA,MAAIjB,IAAI,IAAIH,GAAG,GAAG,CAAlB,EAAqB;AAAA;;AACnB,wBACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAEV,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgCa,IAAI,CAACA,IAArC,+CAAgC,WAAWkB,IAA3C,CADF,kCAGE,oBAAC,cAAD;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,OAAO,EAAC,aAFV;AAGE,MAAA,KAAK,EAAEF,QAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAQE;AACE,MAAA,SAAS,EAAC,qBADZ;AAEE,MAAA,EAAE,EAAC,MAFL;AAGE,MAAA,QAAQ,EAAEpB,YAAY,CAACe,QAAD,CAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,WAAW,EAAC,iBAHd;AAIE,MAAA,GAAG,EAAEhB,QAAQ,CAAC;AAAEwB,QAAAA,QAAQ,EAAE;AAAZ,OAAD,CAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CALF,eAgBE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,SAFP;AAGE,MAAA,WAAW,EAAC,SAHd;AAIE,MAAA,GAAG,EAAExB,QAAQ,CAAC;AAAEwB,QAAAA,QAAQ,EAAE;AAAZ,OAAD,CAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAhBF,eA2BE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,KAFP;AAGE,MAAA,WAAW,EAAC,QAHd;AAIE,MAAA,GAAG,EAAExB,QAAQ,CAAC;AAAEwB,QAAAA,QAAQ,EAAE;AAAZ,OAAD,CAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CA3BF,eAsCE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,WAAW,EAAC,OAHd;AAIE,MAAA,GAAG,EAAExB,QAAQ,CAAC;AAAEwB,QAAAA,QAAQ,EAAE;AAAZ,OAAD,CAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAtCF,oBAiDGnB,IAAI,CAACoB,QAjDR,mDAiDG,eAAeC,GAAf,CAAmB,UAACC,OAAD,EAAUC,KAAV;AAAA;;AAAA,0BAClB;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgCD,OAAO,CAACE,KAAxC,CADF,wBAEGF,OAAO,CAACG,SAFX,uDAEG,mBAAmBJ,GAAnB,CAAuB,UAACK,QAAD,EAAWH,KAAX;AAAA,4BACtB;AAAK,UAAA,GAAG,EAAEA,KAAV;AAAiB,UAAA,SAAS,EAAC,gBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAO,UAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGG,QAAQ,CAACA,QADZ,eAEE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGA,QAAQ,CAACC,OAAT,CAAiBN,GAAjB,CAAqB,UAACO,MAAD,EAASL,KAAT;AAAA,8BACpB;AAAK,YAAA,GAAG,EAAEA,KAAV;AAAiB,YAAA,SAAS,EAAC,cAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGK,MAAM,CAACA,MADV,eAEE;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,IAAI,EAAEF,QAAQ,CAAC3B,EAFjB;AAGE,YAAA,KAAK,EAAE6B,MAAM,CAAC7B,EAHhB;AAIE,YAAA,GAAG,EAAEJ,QAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADoB;AAAA,SAArB,CADH,CAFF,CADF,CADsB;AAAA,OAAvB,CAFH,CADkB;AAAA,KAAnB,CAjDH,eA0EE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CA1EF,CARF,CADF,CADF,CADF;AA6FD,GA9FD,MA8FO;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAP;AACD;AACF,CAzID;;AA2IA,IAAMkC,kBAAkB,GAAG;AACzBrD,EAAAA,MAAM,EAANA,MADyB;AAEzBC,EAAAA,MAAM,EAANA;AAFyB,CAA3B;;AAKA,IAAMqD,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAO;AACL/B,IAAAA,IAAI,EAAE+B,KAAK,CAACC,YAAN,CAAmBhC;AADpB,GAAP;AAGD,CAJD;;AAMA,eAAe3B,OAAO,CAACyD,eAAD,EAAkBD,kBAAlB,CAAP,CAA6CpC,OAA7C,CAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport { useForm } from 'react-hook-form'\nimport { useParams } from 'react-router-dom'\nimport { getAll } from '../../actions'\nimport { create } from '../../actions'\nimport { AiOutlineMail, AiOutlineUser } from 'react-icons/ai'\nimport { CgWorkAlt } from 'react-icons/cg'\nimport { FaIndustry } from 'react-icons/fa'\nimport Title from '../../components/Title'\nimport Button from '../../components/Button'\nimport bg from '../../assets/static/jobpool.jpg'\nimport './styles.scss'\nimport moment from 'moment'\nimport LinearProgress from '@mui/material/LinearProgress'\nconst style = {\n  backgroundImage: `linear-gradient(\nrgba(0, 0, 0, 0.9),\nrgba(0, 0, 0, 0.9)\n),url(${bg})`,\n}\n\nmoment.locale('es-mx')\n\nconsole.log(moment().format('YYYY-MM-DD HH:mm:ss'))\n\nconst Contact = props => {\n  const { register, handleSubmit } = useForm()\n  const [num, setNum] = useState()\n\n  const { id } = useParams()\n  const { test } = props\n\n  useEffect(() => {\n    props.getAll(`tests/${id}`, 'GET_TEST')\n    intervalRef.current = setInterval(decreaseNum, 1000)\n    return () => clearInterval(intervalRef.current)\n    // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    if (test && test.test !== undefined) {\n      const start = moment()\n      const end = moment(test.test.end)\n      const diff = end.diff(start, 'seconds')\n      console.log(moment(test.test.end).format('YYYY-MM-DD HH:mm:ss'))\n\n      setNum(diff)\n    }\n    // eslint-disable-next-line\n  }, [test])\n\n  let intervalRef = useRef()\n\n  const decreaseNum = () => {\n    setNum(prev => prev - 1)\n  }\n\n  const onSubmit = data => {\n    props.create(`tests/${id}`, 'CREATE_TEST', data).then(() => {\n      props.history.push('/')\n    })\n  }\n\n  const progress = ((num * 100) / 3600).toFixed(0)\n\n  if (test && num > 0) {\n    return (\n      <div className=\"test\" style={style}>\n        <div className=\"testContainer\">\n          <div className=\"testContainer__right\">\n            <Title className=\"title --mid\">{test.test?.name}</Title>\n            Tiempo Restante\n            <LinearProgress\n              color=\"success\"\n              variant=\"determinate\"\n              value={progress}\n            />\n            <form\n              className=\"testContainer__form\"\n              id=\"test\"\n              onSubmit={handleSubmit(onSubmit)}\n            >\n              <div className=\"testContainer__formGroup\">\n                <label htmlFor=\"\">\n                  <AiOutlineUser />\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Nombre Completo\"\n                  ref={register({ required: true })}\n                />\n              </div>\n              <div className=\"testContainer__formGroup\">\n                <label htmlFor=\"\">\n                  <FaIndustry />\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"company\"\n                  placeholder=\"Empresa\"\n                  ref={register({ required: true })}\n                />\n              </div>\n              <div className=\"testContainer__formGroup\">\n                <label htmlFor=\"\">\n                  <CgWorkAlt />\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"job\"\n                  placeholder=\"Puesto\"\n                  ref={register({ required: true })}\n                />\n              </div>\n              <div className=\"testContainer__formGroup\">\n                <label htmlFor=\"\">\n                  <AiOutlineMail />\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  ref={register({ required: true })}\n                />\n              </div>\n              {test.sections?.map((section, index) => (\n                <div key={index}>\n                  <Title className=\"title --mid\">{section.title}</Title>\n                  {section.questions?.map((question, index) => (\n                    <div key={index} className=\"test__question\">\n                      <label htmlFor=\"\">\n                        {question.question}\n                        <div className=\"test__answerBox\">\n                          {question.answers.map((answer, index) => (\n                            <div key={index} className=\"test__answer\">\n                              {answer.answer}\n                              <input\n                                type=\"radio\"\n                                name={question.id}\n                                value={answer.id}\n                                ref={register}\n                              />\n                            </div>\n                          ))}\n                        </div>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              ))}\n              <div className=\"testContainer__formGroup\">\n                <Button type=\"submit\">Enviar</Button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  } else {\n    return <h1>El Examen Ha Terminado</h1>\n  }\n}\n\nconst mapDispatchToProps = {\n  getAll,\n  create,\n}\n\nconst mapStatetoProps = state => {\n  return {\n    test: state.reducerTests.test,\n  }\n}\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(Contact)\n"]},"metadata":{},"sourceType":"module"}